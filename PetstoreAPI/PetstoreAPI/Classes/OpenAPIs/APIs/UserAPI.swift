//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


open class UserAPI {
    /**
     Create user
     - POST /user
     - This can only be done by the logged in user.
     - parameter user: (body) Created user object 
     - returns: RequestProvider<Void> 
     */
    open class func createUser(user: User) -> RequestProvider<Void> {
        let path = "/user"
        let parameters = user

        return RequestProvider<Void>(endpoint: path, method: "POST", parameters: RequestProvider.Parameters(parameters))
    }

    /**
     Creates list of users with given input array
     - POST /user/createWithArray
     - parameter user: (body) List of user object 
     - returns: RequestProvider<Void> 
     */
    open class func createUsersWithArrayInput(user: [User]) -> RequestProvider<Void> {
        let path = "/user/createWithArray"
        let parameters = user

        return RequestProvider<Void>(endpoint: path, method: "POST", parameters: RequestProvider.Parameters(parameters))
    }

    /**
     Creates list of users with given input array
     - POST /user/createWithList
     - parameter user: (body) List of user object 
     - returns: RequestProvider<Void> 
     */
    open class func createUsersWithListInput(user: [User]) -> RequestProvider<Void> {
        let path = "/user/createWithList"
        let parameters = user

        return RequestProvider<Void>(endpoint: path, method: "POST", parameters: RequestProvider.Parameters(parameters))
    }

    /**
     Delete user
     - DELETE /user/{username}
     - This can only be done by the logged in user.
     - parameter username: (path) The name that needs to be deleted 
     - returns: RequestProvider<Void> 
     */
    open class func deleteUser(username: String) -> RequestProvider<Void> {
        var path = "/user/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        
        return RequestProvider<Void>(endpoint: path, method: "DELETE")
    }

    /**
     Get user by user name
     - GET /user/{username}
     - parameter username: (path) The name that needs to be fetched. Use user1 for testing.  
     - returns: RequestProvider<User> 
     */
    open class func getUserByName(username: String) -> RequestProvider<User> {
        var path = "/user/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        
        return RequestProvider<User>(endpoint: path, method: "GET")
    }

    /**
     Logs user into the system
     - GET /user/login
     - responseHeaders: [X-Rate-Limit(Int), X-Expires-After(Date)]
     - parameter username: (query) The user name for login 
     - parameter password: (query) The password for login in clear text 
     - returns: RequestProvider<String> 
     */
    open class func loginUser(username: String, password: String) -> RequestProvider<String> {
        let path = "/user/login"
        
        let parameters: [String: Any?] = [
            "username": username, 
            "password": password
        ]
        return RequestProvider<String>(endpoint: path, method: "GET", parameters: RequestProvider.Parameters(parameters))
    }

    /**
     Logs out current logged in user session
     - GET /user/logout
     - returns: RequestProvider<Void> 
     */
    open class func logoutUser() -> RequestProvider<Void> {
        let path = "/user/logout"
        
        return RequestProvider<Void>(endpoint: path, method: "GET")
    }

    /**
     Updated user
     - PUT /user/{username}
     - This can only be done by the logged in user.
     - parameter username: (path) name that need to be updated 
     - parameter user: (body) Updated user object 
     - returns: RequestProvider<Void> 
     */
    open class func updateUser(username: String, user: User) -> RequestProvider<Void> {
        var path = "/user/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let parameters = user

        return RequestProvider<Void>(endpoint: path, method: "PUT", parameters: RequestProvider.Parameters(parameters))
    }

}
